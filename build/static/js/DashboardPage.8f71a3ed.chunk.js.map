{"version":3,"sources":["pages/Dashboard.jsx"],"names":["Header","Layout","Content","Footer","Title","Typography","Dashboard","useState","loading","setLoading","totalUsers","totalContacts","totalDatesheets","totalMessages","totalApplications","totalSyllabus","stats","setStats","previousStats","setPreviousStats","notifications","setNotifications","notificationModalVisible","setNotificationModalVisible","refreshing","setRefreshing","BASE_URL","token","localStorage","getItem","replace","useEffect","storedNotifications","JSON","parse","fetchStats","setItem","stringify","a","alert","config","headers","Authorization","Promise","all","axios","get","responses","newStats","data","count","compareStats","console","error","changes","key","push","id","Date","now","Math","random","title","formatKey","description","read","length","prev","markAllAsRead","map","notif","unreadCount","filter","renderCard","value","icon","color","xs","sm","md","lg","bordered","style","textAlign","borderRadius","boxShadow","transition","background","hoverable","prefix","valueStyle","fontWeight","marginTop","size","tip","minHeight","padding","display","justifyContent","alignItems","src","alt","height","marginRight","level","margin","gap","type","onClick","offset","shape","backgroundColor","border","gutter","fontSize","message","showIcon","itemLayout","dataSource","slice","renderItem","item","Item","marginBottom","Meta","avatar","href","target","rel","visible","footer","disabled","onCancel","handleNotificationClick"],"mappings":"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","file":"static/js/DashboardPage.8f71a3ed.chunk.js","sourcesContent":["// Dashboard.js\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Layout,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Statistic,\r\n  Spin,\r\n  Typography,\r\n  Tooltip,\r\n  Modal,\r\n  Badge,\r\n  Button,\r\n  Alert,\r\n  Divider,\r\n  List,\r\n} from \"antd\";\r\nimport {\r\n  BellOutlined,\r\n  UserOutlined,\r\n  FileTextOutlined,\r\n  MessageOutlined,\r\n  FilePdfOutlined,\r\n  ReloadOutlined,\r\n  CheckCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nconst { Header, Content, Footer } = Layout;\r\nconst { Title } = Typography;\r\n\r\nconst Dashboard = () => {\r\n  // State Management\r\n  const [loading, setLoading] = useState(true);\r\n  const [stats, setStats] = useState({\r\n    totalUsers: 0,\r\n    totalContacts: 0,\r\n    totalDatesheets: 0,\r\n    totalMessages: 0,\r\n    totalApplications: 0,\r\n    totalSyllabus: 0,\r\n  });\r\n  const [previousStats, setPreviousStats] = useState({ ...stats });\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [notificationModalVisible, setNotificationModalVisible] = useState(false);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  const BASE_URL = \"http://api-pil.site/api/admin\"; // API Base URL\r\n  let token = localStorage.getItem(\"x-auth-token\");\r\n\r\n  if (token) {\r\n    token = token.replace(/^\"|\"$/g, \"\"); // Clean token by removing extra quotes\r\n  }\r\n\r\n  // Load notifications from localStorage on mount\r\n  useEffect(() => {\r\n    const storedNotifications = localStorage.getItem(\"notifications\");\r\n    if (storedNotifications) {\r\n      setNotifications(JSON.parse(storedNotifications));\r\n    }\r\n    fetchStats();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [token]);\r\n\r\n  // Save notifications to localStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem(\"notifications\", JSON.stringify(notifications));\r\n  }, [notifications]);\r\n\r\n  // Fetch statistics from API\r\n  const fetchStats = async () => {\r\n    if (!token) {\r\n      alert(\"Token not found. Please log in again.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      };\r\n\r\n      const responses = await Promise.all([\r\n        axios.get(`${BASE_URL}/total-users`, config),\r\n        axios.get(`${BASE_URL}/total-contacts`, config),\r\n        axios.get(`${BASE_URL}/total-datesheets`, config),\r\n        axios.get(`${BASE_URL}/total-messages`, config),\r\n        axios.get(`${BASE_URL}/total-applications`, config),\r\n        axios.get(`${BASE_URL}/total-syllabus`, config),\r\n      ]);\r\n\r\n      const newStats = {\r\n        totalUsers: responses[0]?.data.count || 0,\r\n        totalContacts: responses[1]?.data.count || 0,\r\n        totalDatesheets: responses[2]?.data.count || 0,\r\n        totalMessages: responses[3]?.data.count || 0,\r\n        totalApplications: responses[4]?.data.count || 0,\r\n        totalSyllabus: responses[5]?.data.count || 0,\r\n      };\r\n\r\n      compareStats(newStats);\r\n\r\n      setPreviousStats(stats); // Save current stats as previous stats\r\n      setStats(newStats);\r\n    } catch (error) {\r\n      console.error(\"Error fetching stats:\", error);\r\n      alert(\"Failed to fetch stats. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n\r\n  // Compare new stats with previous stats to identify changes\r\n  const compareStats = (newStats) => {\r\n    const changes = [];\r\n\r\n    for (const key in newStats) {\r\n      if (newStats[key] > previousStats[key]) {\r\n        changes.push({\r\n          id: Date.now() + Math.random(), // Unique ID for each notification\r\n          title: `Increase in ${formatKey(key)}`,\r\n          description: `The value of ${formatKey(\r\n            key\r\n          )} has increased by ${newStats[key] - previousStats[key]}.`,\r\n          read: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (changes.length > 0) {\r\n      setNotifications((prev) => [...changes, ...prev]);\r\n    }\r\n  };\r\n\r\n  // Format keys to readable titles\r\n  const formatKey = (key) => {\r\n    switch (key) {\r\n      case \"totalUsers\":\r\n        return \"Total Users\";\r\n      case \"totalContacts\":\r\n        return \"Total Contacts\";\r\n      case \"totalDatesheets\":\r\n        return \"Total Datesheets\";\r\n      case \"totalMessages\":\r\n        return \"Total Messages\";\r\n      case \"totalApplications\":\r\n        return \"Total Applications\";\r\n      case \"totalSyllabus\":\r\n        return \"Total Syllabus Uploaded\";\r\n      default:\r\n        return key;\r\n    }\r\n  };\r\n\r\n  // Handle Refresh Button Click\r\n  const handleRefresh = () => {\r\n    setRefreshing(true);\r\n    fetchStats();\r\n  };\r\n\r\n  // Handle Notifications Button Click\r\n  const handleOpenNotifications = () => {\r\n    setNotificationModalVisible(true);\r\n    markAllAsRead(); // Mark all notifications as read when modal is opened\r\n  };\r\n\r\n  // Mark a single notification as read/unread (optional)\r\n  const toggleReadStatus = (id) => {\r\n    setNotifications((prev) =>\r\n      prev.map((notif) =>\r\n        notif.id === id ? { ...notif, read: !notif.read } : notif\r\n      )\r\n    );\r\n  };\r\n\r\n  // Mark all notifications as read\r\n  const markAllAsRead = () => {\r\n    setNotifications((prev) =>\r\n      prev.map((notif) => ({ ...notif, read: true }))\r\n    );\r\n  };\r\n\r\n  // Count of unread notifications\r\n  const unreadCount = notifications.filter((notif) => !notif.read).length;\r\n\r\n  // Render individual statistic card\r\n  const renderCard = (title, value, icon, color) => (\r\n    <Col xs={24} sm={12} md={8} lg={6} key={title}>\r\n      <Card\r\n        bordered={false}\r\n        style={{\r\n          textAlign: \"center\",\r\n          borderRadius: \"12px\",\r\n          boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.1)\",\r\n          transition: \"transform 0.3s, box-shadow 0.3s\",\r\n          background: \"#ffffff\",\r\n        }}\r\n        hoverable\r\n      >\r\n        <Statistic\r\n          title={title}\r\n          value={value}\r\n          prefix={icon}\r\n          valueStyle={{ color, fontWeight: \"bold\" }}\r\n        />\r\n      </Card>\r\n    </Col>\r\n  );\r\n\r\n  // If data is loading, show spinner\r\n  if (loading) {\r\n    return (\r\n      <div style={{ textAlign: \"center\", marginTop: \"20%\" }}>\r\n        <Spin size=\"large\" tip=\"Loading Dashboard...\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout style={{ background: \"#f0f2f5\", minHeight: \"100vh\" }}>\r\n      {/* Header Section */}\r\n      <Header\r\n        style={{\r\n          background: \"#ffffff\",\r\n          padding: \"0 30px\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          boxShadow: \"0 2px 8px #f0f1f2\",\r\n        }}\r\n      >\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <img\r\n            src=\"https://pioneerinstitute.in/assets/images/nav-logo.png\"\r\n            alt=\"Logo\"\r\n            style={{ height: \"50px\", marginRight: \"20px\" }}\r\n          />\r\n          <Title level={3} style={{ color: \"#1890ff\", margin: 0 }}>\r\n            Admin Dashboard\r\n          </Title>\r\n        </div>\r\n        <div style={{ display: \"flex\", alignItems: \"center\", gap: \"15px\" }}>\r\n          <Button\r\n            type=\"primary\"\r\n            icon={<ReloadOutlined />}\r\n            onClick={handleRefresh}\r\n            loading={refreshing}\r\n          >\r\n            Refresh Data\r\n          </Button>\r\n          <Tooltip title=\"Notifications\">\r\n            <Badge count={unreadCount} size=\"small\" offset={[-5, 5]}>\r\n              <Button\r\n                shape=\"circle\"\r\n                icon={<BellOutlined />}\r\n                onClick={handleOpenNotifications}\r\n                style={{\r\n                  backgroundColor: \"#1890ff\",\r\n                  border: \"none\",\r\n                  color: \"#ffffff\",\r\n                }}\r\n              />\r\n            </Badge>\r\n          </Tooltip>\r\n        </div>\r\n      </Header>\r\n\r\n      {/* Content Section */}\r\n      <Content style={{ padding: \"30px 50px\" }}>\r\n        <Row gutter={[24, 24]}>\r\n          {renderCard(\r\n            \"Total Users\",\r\n            stats.totalUsers,\r\n            <UserOutlined style={{ fontSize: \"24px\" }} />,\r\n            \"#1890ff\"\r\n          )}\r\n          {renderCard(\r\n            \"Total Contacts\",\r\n            stats.totalContacts,\r\n            <MessageOutlined style={{ fontSize: \"24px\" }} />,\r\n            \"#52c41a\"\r\n          )}\r\n          {renderCard(\r\n            \"Total Datesheets\",\r\n            stats.totalDatesheets,\r\n            <FileTextOutlined style={{ fontSize: \"24px\" }} />,\r\n            \"#fa8c16\"\r\n          )}\r\n          {renderCard(\r\n            \"Total Messages\",\r\n            stats.totalMessages,\r\n            <MessageOutlined style={{ fontSize: \"24px\" }} />,\r\n            \"#722ed1\"\r\n          )}\r\n          {renderCard(\r\n            \"Total Applications\",\r\n            stats.totalApplications,\r\n            <UserOutlined style={{ fontSize: \"24px\" }} />,\r\n            \"#eb2f96\"\r\n          )}\r\n          {renderCard(\r\n            \"Total Syllabus Uploaded\",\r\n            stats.totalSyllabus,\r\n            <FilePdfOutlined style={{ fontSize: \"24px\" }} />,\r\n            \"#13c2c2\"\r\n          )}\r\n        </Row>\r\n\r\n        <Divider />\r\n\r\n        {/* Notifications Section */}\r\n        <div>\r\n          <Title level={4}>Recent Notifications</Title>\r\n          {notifications.length === 0 ? (\r\n            <Alert\r\n              message=\"No Notifications\"\r\n              description=\"You are all caught up!\"\r\n              type=\"success\"\r\n              showIcon\r\n            />\r\n          ) : (\r\n            <List\r\n              itemLayout=\"horizontal\"\r\n              dataSource={notifications.slice(0, 5)} // Show latest 5 notifications\r\n              renderItem={(item) => (\r\n                <List.Item\r\n                  style={{\r\n                    background: item.read ? \"#ffffff\" : \"#e6f7ff\",\r\n                    borderRadius: \"8px\",\r\n                    marginBottom: \"10px\",\r\n                    padding: \"10px\",\r\n                    boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\r\n                  }}\r\n                >\r\n                  <List.Item.Meta\r\n                    avatar={\r\n                      item.read ? (\r\n                        <CheckCircleOutlined\r\n                          style={{ color: \"#52c41a\", fontSize: \"20px\" }}\r\n                        />\r\n                      ) : (\r\n                        <BellOutlined\r\n                          style={{ color: \"#1890ff\", fontSize: \"20px\" }}\r\n                        />\r\n                      )\r\n                    }\r\n                    title={\r\n                      <span style={{ fontWeight: item.read ? \"normal\" : \"bold\" }}>\r\n                        {item.title}\r\n                      </span>\r\n                    }\r\n                    description={item.description}\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          )}\r\n        </div>\r\n      </Content>\r\n\r\n      {/* Footer Section */}\r\n      <Footer style={{ textAlign: \"center\", background: \"#f0f2f5\" }}>\r\n        Admin Dashboard ©2024 Powered by{\" \"}\r\n        <a href=\"https://algodream.in\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          AlgoDream\r\n        </a>\r\n      </Footer>\r\n\r\n      {/* Notification Modal */}\r\n      <Modal\r\n        title=\"Notifications\"\r\n        visible={notificationModalVisible}\r\n        footer={[\r\n          <Button\r\n            key=\"markAll\"\r\n            onClick={markAllAsRead}\r\n            disabled={unreadCount === 0}\r\n          >\r\n            Mark All as Read\r\n          </Button>,\r\n          <Button\r\n            key=\"close\"\r\n            type=\"primary\"\r\n            onClick={() => setNotificationModalVisible(false)}\r\n          >\r\n            Close\r\n          </Button>,\r\n        ]}\r\n        onCancel={() => setNotificationModalVisible(false)}\r\n      >\r\n        {notifications.length === 0 ? (\r\n          <p>No notifications to display.</p>\r\n        ) : (\r\n          <List\r\n            itemLayout=\"horizontal\"\r\n            dataSource={notifications}\r\n            renderItem={(item) => (\r\n              <List.Item\r\n                style={{\r\n                  background: item.read ? \"#f9f9f9\" : \"#e6f7ff\",\r\n                  borderRadius: \"8px\",\r\n                  marginBottom: \"10px\",\r\n                  padding: \"10px\",\r\n                  boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\",\r\n                }}\r\n                onClick={() => handleNotificationClick(item.id)}\r\n              >\r\n                <List.Item.Meta\r\n                  avatar={\r\n                    item.read ? (\r\n                      <CheckCircleOutlined\r\n                        style={{ color: \"#52c41a\", fontSize: \"20px\" }}\r\n                      />\r\n                    ) : (\r\n                      <BellOutlined\r\n                        style={{ color: \"#1890ff\", fontSize: \"20px\" }}\r\n                      />\r\n                    )\r\n                  }\r\n                  title={\r\n                    <span style={{ fontWeight: item.read ? \"normal\" : \"bold\" }}>\r\n                      {item.title}\r\n                    </span>\r\n                  }\r\n                  description={item.description}\r\n                />\r\n              </List.Item>\r\n            )}\r\n          />\r\n        )}\r\n      </Modal>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"sourceRoot":""}